
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;

import com.google.gson.Gson;

class TCPServer { 
	
	public static final String HOSTNAME = "UOA-CS725";
	public static final int PORTNUMBER = 6789;
	
	
	public static void main(String argv[]) throws Exception 
	{ 
		UserData[] udArray = null;
		// initialize user data
		BufferedReader reader = new BufferedReader(new FileReader ("userdata.json"));
		String line = null;
	    StringBuilder stringBuilder = new StringBuilder();
	    String temp = "";
	    try {
	        while((line = reader.readLine()) != null) {
	            stringBuilder.append(line + "\n");
	        }
	        temp = stringBuilder.toString();
	        udArray = new Gson().fromJson(temp, UserData[].class);
	    } catch (IOException e) {
			e.printStackTrace();
		} finally {
	        reader.close();
	    }
	    System.out.println("User Data Loaded...");
	    List<UserData> userDataList = Arrays.asList(udArray);
	    for (UserData ud : userDataList) {
	    	System.out.println("user:" + ud.user + ", admin:" + ud.admin + ", account:" + ud.account + ", password:" + ud.password);
	    }
		
		String clientSentence; 
		String outputSentence = ""; 
		String cmd;
		
		ServerSocket welcomeSocket = new ServerSocket(PORTNUMBER); 
		
		while(true) { 
			// set new client settings
			LoginState state = LoginState.WAIT_ACC;
			String user = null;
			String account = null;
			
			Socket connectionSocket = welcomeSocket.accept(); 
			
			BufferedReader inFromClient = 
			new BufferedReader(new
				InputStreamReader(connectionSocket.getInputStream())); 
			
			DataOutputStream  outToClient = 
			new DataOutputStream(connectionSocket.getOutputStream()); 
			
			outToClient.writeBytes("+" + HOSTNAME + " SFTP Service" + '\n'); 
			
			while (true){
				
				clientSentence = inFromClient.readLine(); 
				
				StringTokenizer tokenizedLine =
						new StringTokenizer(clientSentence);
				
				cmd = tokenizedLine.nextToken();
				if (cmd.equals("DONE")){
					outputSentence = "+" + HOSTNAME + " closing connection";
				
				}else if (!tokenizedLine.hasMoreTokens()){
					outputSentence = "-ERROR: Not enough args...";
					
				} else if (cmd.equals("USER")) { // USER
					if (state == LoginState.WAIT_ACC || state == LoginState.WAIT_PW){
						String tempUser = tokenizedLine.nextToken();
						int result = checkUser(tempUser, userDataList);
						if (result == -1){ // invalid user
							outputSentence = "-Invalid user-id, try again";
						}else if (result == 0){ // bypass
							outputSentence = "!" + tempUser + " logged in";
							state = LoginState.LOGIN_USER;
							user = tempUser;
							account = null;
						}else if (result == 1){ // request account & password
							outputSentence = "+User-id valid, send account and password";
							user = tempUser;
							account = null;
							state = LoginState.WAIT_ACC;
						}
					}else{
						outputSentence = "-ERROR: Already logged in as " + ((state==LoginState.LOGIN_USER)?user:account);
					}
					
				} else if (cmd.equals("ACCT")) {
					if (state == LoginState.WAIT_ACC || state == LoginState.WAIT_PW){
						String tempAccount = tokenizedLine.nextToken();
						int result = checkAccount(tempAccount, userDataList);
						if (result == -1){ // invalid account
							outputSentence = "-Invalid account, try again";
						}else if (result == 0){ // bypass
							outputSentence = "!Account valid, logged in";
							state = LoginState.LOGIN_ACCOUNT;
							account = tempAccount;
							user = null;
						}else if (result == 1){ // request password
							outputSentence = "+Account valid, send password";
							account = tempAccount;
							user = null;
							state = LoginState.WAIT_PW;
						}
					}else{
						outputSentence = "-ERROR: Already logged in as " + ((state==LoginState.LOGIN_USER)?user:account);
					}
				
				} else if (cmd.equals("PASS")) {
					if (state == LoginState.WAIT_PW){
						String tempPassword = tokenizedLine.nextToken();
						int result = checkPassAccount(tempPassword, account, userDataList);
						if (result == -1){ // invalid password
							outputSentence = "-Wrong password, try again";
						}else if (result == 1){ // logged in account
							
						}
					}else if (state == LoginState.WAIT_ACC){
						String tempPassword = tokenizedLine.nextToken();
						int result = checkPassUser(tempPassword, user, userDataList);
						if (result == -1){ // invalid password
							outputSentence = "-Wrong password, try again";
						}else if (result == 1){ // logged in user
							
						}
						
					}else{
						outputSentence = "-ERROR: Already logged in as " + ((state==LoginState.LOGIN_USER)?user:account);
					}
					
				} else {
					outputSentence = "-ERROR: Unrecognised Command...";
				}
				
				outToClient.writeBytes(outputSentence + '\n'); 
				if (cmd.equals("DONE")){
					break;
				}
			}
		} 
	}
	
	private static int checkPassAccount(String password, String account, List<UserData> userDataList){
		if (account == null){
			return -1;
		}
		for (UserData ud : userDataList){
			if (ud.account != null){
				if (ud.account.equals(account) && ud.password.equals(password)){
					return 1;
				}
			}
		}
		
		return -1;
	}
	
	
	private static int checkPassUser(String password, String user, List<UserData> userDataList){
		if (user == null){
			return -1;
		}
		
		
		
		return -1;
	}
	
	
	private static int checkUser(String name, List<UserData> userDataList){
		if (name.equals(HOSTNAME)){
			return 0;
		}
		
		for (UserData ud : userDataList) {
			if (ud.user != null){
				if (ud.user.equals(name)){ // found user
					if (ud.admin){ // check if is admin
						return 0;
					}else{
						return 1;
					}
				}
			}
		}
		return -1;
	}
	
	
	
	private static int checkAccount(String name, List<UserData> userDataList){

		for (UserData ud : userDataList) {
			if (ud.account != null){
				if (ud.account.equals(name)){ // found account
					if (ud.password == null){ // check if has password
						return 0;
					}else{
						return 1;
					}
				}
			}
		}
		return -1;
	}
} 

class UserData {
	UserData(){}
	public String user;
	public boolean admin;
	public String account;
	public String password;
}
